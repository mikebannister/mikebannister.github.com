---
layout: post
title: "Capybara's Acceptance Test DSL Has No Respect (for Rails' Caching Settings)"
date: 2011-10-10 14:25
comments: true
categories:
- Rails
- Testing
- Caching
---

## Problem ##

Lately I ran into an interesting snag when I added caching to speed up the generation of reports on an HR app I'm building for a client. The caching proved to be effective and pretty easy to implement but when I ran the full test suite the relevant acceptance tests broke. In this app we use Capybara's new RSpec DSL for acceptance tests. See Jeff Kreeftmeijer's [great introduction](http://jeffkreeftmeijer.com/2011/acceptance-testing-using-capybaras-new-rspec-dsl/).

My `config/environments/test.rb` was not changed from the default generated by Rails so I assumed it would respect the default configuration which has `perform_caching` set to false. So I did a little print-line debugging to see what was going wrong and sure enough `Rails.cache.fetch`'s block was never getting called! I turned off memcached but that didn't clear it up because it was using Rail's `MemoryStore`. But why!?

Next I decided check Google quickly before cracking open Capybara's source code and trying to find out how it's acceptance test DSL is implemented. David Chelimsky's (RSpec's creator) response here led me to decide what the title of this post states.

## Solution ##

In the tests that needed I now have a `background` block that includes:

    Rails.cache.clear

Problem solved but...

## What's Missing ##

I tinkered a bit figuring I'd be able to make this nice and DRY by having a global `before` block that only applied to `:type => :acceptance` but no matter how I jiggled the handle it wouldn't work the way I'd like. Please let me know if you know how I can get this to work!
